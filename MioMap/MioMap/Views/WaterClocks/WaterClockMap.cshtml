<style>
    /* NOTE */
    .note-container {
        border: 1px solid gray;
        padding: 20px;
        display: flex;
        flex-direction: row;
        gap: 10px;
    }

    .note-item {
        width: 47%;
    }

        .note-item h4 {
            margin: 0;
            padding: 0;
        }

        .note-item .water-clock-label {
            margin-top: 5px;
        }

            .note-item .water-clock-label .water-clock-item {
                display: flex;
                flex-direction: row;
                align-items: center;
                gap: 5px;
                margin-bottom: 5px;
            }

                .note-item .water-clock-label .water-clock-item .label-status {
                    width: 25%;
                }

    .label-water-clock-bar {
        border-radius: 100%;
        width: 20px;
        height: 20px;
    }

        .label-water-clock-bar.none {
            background-color: gray;
        }

        .label-water-clock-bar.stable {
            background-color: #16a34a;
        }

        .label-water-clock-bar.reparing {
            background-color: #f59e0b;
        }

        .label-water-clock-bar.maintance {
            background-color: #9333ea;
        }

        .label-water-clock-bar.damaged {
            background-color: #e11d48;
        }

        .label-water-clock-bar.safe {
            background-color: #5eead4;
        }

        .label-water-clock-bar.infected {
            background-color: #db2777;
        }

    .label-pipline-bar {
        border-radius: 5px;
        width: 100%;
        height: 8px;
    }

        .label-pipline-bar.default {
            background-color: #3b82f6;
        }

        .label-pipline-bar.highlight {
            background-color: #93c5fd;
        }
    /* MAP INFO BOX */

    .map-info-container {
        background: white;
        width: 350px;
        box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px;
        border-radius: 10px;
        padding: 10px;
    }

    .map-info-image {
        width: 100%;
    }

        .map-info-image img {
            width: inherit;
            height: 100px;
            object-fit: cover;
            border-radius: 8px 8px 0 0
        }

    .map-info-header {
        margin: 10px 0;
    }

        .map-info-header p {
            padding: 0;
            margin: 0;
            color: #312e81;
            font-weight: bold;
        }

        .map-info-header .title {
            font-size: 24px;
        }

        .map-info-header .address {
            font-size: 16px;
        }

    .map-info-content .attribute {
        display: flex;
        gap: 20px;
    }

        .map-info-content .attribute .property {
            font-weight: bold;
        }

    .map-info-action {
        display: flex;
        gap: 10px;
        justify-content: end;
    }

        .map-info-action button {
            cursor: pointer;
            border: 0;
            padding: 8px;
            -webkit-border-radius: 5px;
            -moz-border-radius: 5px;
            border-radius: 5px;
            display: block;
            text-decoration: none;
            text-align: center;
            font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
            font-size: 14px;
        }

            .map-info-action button:hover {
                opacity: .9;
                -webkit-transition: background-color 1s ease-in;
                -moz-transition: background-color 1s ease-in;
                -o-transition: background-color 1s ease-in;
                transition: background-color 1s ease-in;
            }


    /* Control the colour scheme */

    .btn-blue {
        color: #FFF;
        background: #1e40af;
        -webkit-box-shadow: 0 3px 1px #1e40af;
        -moz-box-shadow: 0 3px 1px #1e40af;
        box-shadow: 0 3px 1px #1e40af;
    }

    .btn-light {
        color: black;
        background: #f1f5f9;
        -webkit-box-shadow: 0 3px 1px #f1f5f9;
        -moz-box-shadow: 0 3px 1px #f1f5f9;
        box-shadow: 0 3px 1px #f1f5f9;
    }
</style>

<div class="note-container">
    <div class="note-item">
        <h4>Van nước</h4>
        <div class="water-clock-label">
            <div class="water-clock-item">
                <span class="label-status">Chưa cập nhật</span>
                <span class="label-water-clock-bar none"><span>
            </div>
            <div class="water-clock-item">
                <span class="label-status">Ổn định</span>
                <span class="label-water-clock-bar stable"><span>
            </div>
            <div class="water-clock-item">
                <span class="label-status">Đang sửa chữa</span>
                <span class="label-water-clock-bar reparing"><span>
            </div>
            <div class="water-clock-item">
                <span class="label-status">Bảo trì</span>
                <span class="label-water-clock-bar maintance"><span>
            </div>
            <div class="water-clock-item">
                <span class="label-status">Hỏng</span>
                <span class="label-water-clock-bar damaged"><span>
            </div>
        </div>
    </div>
    <div class="note-item">
        <h4>Kiểm tra van nước</h4>
        <div class="water-clock-label">
            <div class="water-clock-item">
                <span class="label-status">Van an toàn</span>
                <span class="label-water-clock-bar safe"><span>
            </div>
            <div class="water-clock-item">
                <span class="label-status">Van bị ảnh hưởng</span>
                <span class="label-water-clock-bar infected"><span>
            </div>
        </div>
    </div>
    <div class="note-item">
        <h4>Đường ống</h4>
        <div class="water-clock-label">
            <div class="water-clock-item">
                <span class="label-status">Mặc định</span>
                <span class="label-pipline-bar default"><span>
            </div>
            <div class="water-clock-item">
                <span class="label-status">Đường ống thuộc van đang hover</span>
                <span class="label-pipline-bar highlight"><span>
            </div>
        </div>
    </div>
</div>
<div id="myMap" style="width:100%;height:80vh"></div>

<script type='text/javascript'>
    var map, tooltip, highlightLayer, dataLayer, directionsManager;
    var tooltipTemplate = '<div style="background-color:white;height:100px;width:150px;padding:5px;text-align:center; border-radius: 15px; padding:10px"><b>{title}</b></div>';

    const tempInfoBox = []

    // INIT DATA
    const waterClockMockData = [
        {
            waterClockId: 1,
            color: 'red',
            lat: 10.742932117315178, // x
            long: 106.69775233524817, // y
            title: 'Van số 001',
            address: '21 Đường số 6, KDC Him Lam, Tân Hưng, Q7, TP Hồ Chí Minh',
            description: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. ",
            status: 1,
            statusDisplay: 'Ổn định',
            inWaterClock: '',
            outWaterClock: '2,5'
        },
        {
            waterClockId: 2,
            color: 'red',
            lat: 10.742724046654033, // x
            long: 106.69899017470854, // y
            title: 'Van số 002',
            address: '21 Đường số 6, KDC Him Lam, Tân Hưng, Q7, TP Hồ Chí Minh',
            description: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. ",
            status: 1,
            statusDisplay: 'Ổn định',
            inWaterClock: '1',
            outWaterClock: '3'
        },
        {
            waterClockId: 3,
            color: 'red',
            lat: 10.742302637280815, // x
            long: 106.6988748397209, // y
            title: 'Van số 003',
            address: '21 Đường số 6, KDC Him Lam, Tân Hưng, Q7, TP Hồ Chí Minh',
            description: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. ",
            status: 1,
            statusDisplay: 'Ổn định',
            inWaterClock: '2',
            outWaterClock: '4'
        },
        {
            waterClockId: 4,
            color: 'red',
            lat: 10.742157777672958, // x
            long: 106.69957221406477, // y
            title: 'Van số 004',
            address: '21 Đường số 6, KDC Him Lam, Tân Hưng, Q7, TP Hồ Chí Minh',
            description: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. ",
            status: 1,
            statusDisplay: 'Ổn định',
            inWaterClock: '3',
            outWaterClock: ''
        },
        {
            waterClockId: 5,
            color: 'red',
            lat: 10.742476468718522, // x
            long: 106.69765979903715, // y
            title: 'Van số 005',
            address: '21 Đường số 6, KDC Him Lam, Tân Hưng, Q7, TP Hồ Chí Minh',
            description: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. ",
            status: 1,
            statusDisplay: 'Ổn định',
            inWaterClock: '1',
            outWaterClock: '6,11'
        },
        {
            waterClockId: 6,
            color: 'red',
            lat: 10.742318440142924, // x
            long: 106.69870854276198, // y
            title: 'Van số 006',
            address: '21 Đường số 6, KDC Him Lam, Tân Hưng, Q7, TP Hồ Chí Minh',
            description: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. ",
            status: 1,
            statusDisplay: 'Ổn định',
            inWaterClock: '5',
            outWaterClock: ''
        },
        {
            waterClockId: 7,
            color: 'red',
            lat: 10.74187332587718, // x
            long: 106.69858073902762, // y
            title: 'Van số 007',
            address: '21 Đường số 6, KDC Him Lam, Tân Hưng, Q7, TP Hồ Chí Minh',
            description: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. ",
            status: 1,
            statusDisplay: 'Ổn định',
            inWaterClock: '11',
            outWaterClock: '8'
        },
        {
            waterClockId: 8,
            color: 'red',
            lat: 10.741636282509404, // x
            long: 106.69857537460959, // y
            title: 'Van số 008',
            address: '21 Đường số 6, KDC Him Lam, Tân Hưng, Q7, TP Hồ Chí Minh',
            description: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. ",
            status: 1,
            statusDisplay: 'Ổn định',
            inWaterClock: '7',
            outWaterClock: '9'
        },
        {
            waterClockId: 9,
            color: 'red',
            lat: 10.741404506592133, // x
            long: 106.69855123472846, // y
            title: 'Van số 009',
            address: '21 Đường số 6, KDC Him Lam, Tân Hưng, Q7, TP Hồ Chí Minh',
            description: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. ",
            status: 1,
            statusDisplay: 'Ổn định',
            inWaterClock: '8',
            outWaterClock: '10,12'
        },
        {
            waterClockId: 10,
            color: 'red',
            lat: 10.741349196403746, // x
            long: 106.69876849365866, // y
            title: 'Van số 010',
            address: '21 Đường số 6, KDC Him Lam, Tân Hưng, Q7, TP Hồ Chí Minh',
            description: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. ",
            status: 1,
            statusDisplay: 'Ổn định',
            inWaterClock: '9',
            outWaterClock: '14'
        },
        {
            waterClockId: 11,
            color: 'red',
            lat: 10.742043384190637, // x
            long: 106.69760086278184, // y
            title: 'Van số 011',
            address: '21 Đường số 6, KDC Him Lam, Tân Hưng, Q7, TP Hồ Chí Minh',
            description: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. ",
            status: 1,
            statusDisplay: 'Ổn định',
            inWaterClock: '5',
            outWaterClock: '12'
        },
        {
            waterClockId: 12,
            color: 'red',
            lat: 10.741577198986306, // x
            long: 106.69750698546632, // y
            title: 'Van số 012',
            address: '21 Đường số 6, KDC Him Lam, Tân Hưng, Q7, TP Hồ Chí Minh',
            description: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. ",
            status: 1,
            statusDisplay: 'Ổn định',
            inWaterClock: '9,11',
            outWaterClock: '13'
        },
        {
            waterClockId: 13,
            color: 'red',
            lat: 10.741798439511982, // x
            long: 106.69607867268783, // y
            title: 'Van số 013',
            address: '21 Đường số 6, KDC Him Lam, Tân Hưng, Q7, TP Hồ Chí Minh',
            description: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. ",
            status: 1,
            statusDisplay: 'Ổn định',
            inWaterClock: '12',
            outWaterClock: ''
        },
        {
            waterClockId: 14,
            color: 'red',
            lat: 10.741051001401715, // x
            long: 106.70032366726005, // y
            title: 'Van số 014',
            address: '21 Đường số 6, KDC Him Lam, Tân Hưng, Q7, TP Hồ Chí Minh',
            description: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. ",
            status: 1,
            statusDisplay: 'Ổn định',
            inWaterClock: '10',
            outWaterClock: ''
        }
    ]

    let waterClocks = []
    let pipeWaters = []
    let matrixConnection
    // END INIT

    function GetMap() {
        map = new Microsoft.Maps.Map('#myMap', {
            credentials: 'Amuk1_zODINIvN2YrHfOFxxScGfe8LhyPJvz37PbrCTQhZEWgkFXJvk7OcsM5SIK',
            center: new Microsoft.Maps.Location(10.742767792534757, 106.69918865817564),
            mapTypeId: Microsoft.Maps.MapTypeId.road,
            zoom: 18
        });

        $.ajax({
            type: "GET",
            url: '@Url.Action("GetWaterClockAsJson", "WaterClocks")',
            cache: false,
            contentType: false,
            processData: false,
            success: function (res) {
                waterClocks = res

                pipeWaters = handlePolyline(res)

                // RENDER POLYLINES - PIPELINE
                Microsoft.Maps.loadModule('Microsoft.Maps.SpatialMath', function () {
                    pipeWaters?.forEach(pol => {
                        map.entities.push(pol);
                    })
                    highlightLayer = new Microsoft.Maps.Layer();
                    map.layers.insert(highlightLayer);
                });

                // RENDER POINT/PIN - WaterClock
                res?.forEach(wc => {
                    const { lat, long } = wc
                    // const loc = new Microsoft.Maps.Location(lat, long)
                    const pushpin = handlePushPin(map, lat, long, wc)
                    // pointArray.push(pushpin)
                })

                //Create an infobox at the center of the map but don't show it.
                infobox = new Microsoft.Maps.Infobox(map.getCenter(), {
                    visible: false
                });

                //Assign the infobox to a map instance.
                infobox.setMap(map);

                const faultyClock = 1
                // Check WaterClock
                const una = unaffectedClocks(res, faultyClock);
                console.log(una);  // Output: [2]

                const aff = isAffected(res, faultyClock);
                console.log(aff);  // Output: [1, 0]
            }
        });

        $.ajax({
            type: "GET",
            url: '@Url.Action("MatrixOfClockConnection", "GisLayers")',
            cache: false,
            contentType: false,
            processData: false,
            success: function (res) {
                matrixConnection = res
            }
        });

    }

    function handlePushPin(map, lat, long, data) {
        const { id, title, address, waterClockStatus, description, color } = data

        var infobox;
        var infoboxTemplate = `<div class="map-info-container">
                                          <div class="map-info-image">
                                            <img src="https://media-cdn.tripadvisor.com/media/photo-s/07/36/55/06/bermondsey-street-coffee.jpg" alt="img" />
                                          </div>
                                          <div class="map-info-body">
                                            <div class="map-info-header">
                                              <p class="title">{title}</h3>
                                              <p class="address">{address}</h3>
                                            </div>
                                            <div class="map-info-content">
                                              <div class="attribute">
                                                <span class="property">Tình trạng</span><span lass="value">{status}</span>
                                              </div>
                                              <div>
                                                <p>{description}</p>
                                              </div>
                                            </div>
                                            <div class="map-info-action">
                                              <button class="btn-blue" onclick="getDirection('${lat},${long}')">Chỉ đường</button>
                                              <button class="btn-blue" onclick="handleCheckWaterClock('${id}')">Kiểm tra đồng hồ</button>
                                              <button class="btn-light" id="close-btn-${lat}">Đóng</button>
                                            </div>
                                          </div>
                                        </div>`;

        var loc = new Microsoft.Maps.Location(lat, long)

        const colorWaterStatus = getColorWaterClockByStatus(waterClockStatus)
        var pushpin = new Microsoft.Maps.Pushpin(loc, {
            color: colorWaterStatus,
            title: title
        });

        //console.log(pushpin)

        //Add the pushpin to the map
        map.entities.push(pushpin);
        const statusDisplay = getStatusWaterClockDisplay(waterClockStatus)

        infobox = new Microsoft.Maps.Infobox(loc, {
            visible: false,
            htmlContent: infoboxTemplate
                .replace('{title}', title)
                .replace('{address}', address)
                .replace('{status}', statusDisplay)
                .replace('{active}', statusDisplay)
                .replace('{description}', description)
        }
        );

        infobox.setMap(map);

        tempInfoBox.push(infobox)

        Microsoft.Maps.Events.addHandler(pushpin, 'mouseover', function (e) {
            // Hightlight
            pushpinHovered(e, infobox, data?.name, data)
            // lineClicked(data?.polylineIds)
            lineClicked(lat, long)
        });
        Microsoft.Maps.Events.addHandler(pushpin, 'mouseout', function (e) {
            closeTooltip()
            highlightLayer.clear();
        });

        Microsoft.Maps.Events.addHandler(infobox, 'click', function (e) {
            if (e.originalEvent.target.id === `close-btn-${lat}`) {
                infobox.setOptions({ visible: false });
            }
        });

        Microsoft.Maps.Events.addHandler(pushpin, 'click', function (e) {
            closeTooltip();

            for (let item of tempInfoBox) {
                item.setOptions({ visible: false });
            }

            infobox.setOptions({
                visible: true,
                showCloseButton: true,
                offset: new Microsoft.Maps.Point(0, 25)
            });
        });


        tooltip = new Microsoft.Maps.Infobox(loc, {
            visible: false,
            showPointer: false,
            showCloseButton: false,
            offset: new Microsoft.Maps.Point(0, 25)
        });

        tooltip.setMap(map);

        return pushpin;
        // GET DIRECTION

    }

    function handlePolyline(data) {
        const result = [];

        for (const item of data) {
            const currentClock = item;
            const outWaterClockIds = currentClock?.outWaterClock.split(",")

            const polylines = data.filter(x => outWaterClockIds?.includes(x.id.toString()))
            for (const poly of polylines) {
                const polyline = new Microsoft.Maps.Polyline([
                    new Microsoft.Maps.Location(currentClock.lat, currentClock.long),
                    new Microsoft.Maps.Location(poly.lat, poly.long),
                ], {
                    strokeColor: '#2563eb',
                    strokeThickness: 4
                });
                result.push(polyline);
            }
        }

        return result;
    }

    function pushpinHovered(e, infobox, infoboxTitle, data) {
        //Hide the infobox
        infobox.setOptions({ visible: false });
        tooltip.setOptions({
            location: e.target.getLocation(),
            title: data.name,
            description: data.description,
            // htmlContent: tooltipTemplate.replace('{title}', infoboxTitle),
            visible: true
        });
    }

    function closeTooltip() {
        //Close the tooltip.
        tooltip.setOptions({
            visible: false
        });
    }

    function lineClicked(lat, long) {
        highlightLayer.clear();

        // GET Polylines with IDS

        const polylines = pipeWaters.filter(pol => {
            return pol?.geometry.y.includes(lat) && pol?.geometry.x.includes(long)
        })
        if (!polylines || polylines.length === 0) {
            alert("Van này không thuộc ống nào!")
            return
        }

        for (let poly of polylines) {

            const _locations = poly?.geometry?.x.map((longitude, index) => {
                const latitude = poly?.geometry?.y[index];
                return new Microsoft.Maps.Location(latitude, longitude);
            });

            for (let loca of _locations) {
                var clickLocation = loca;
                var lineSegment = getLineSegment(clickLocation, _locations);

                if (lineSegment) {
                    highlightLayer.add(lineSegment.path);
                }
            }
        }
    }

    function getLineSegment(clickloc, locs) {
        var minDistance = Number.MAX_VALUE;
        var lineSegment = null;

        for (var i = 0, len = locs.length - 1; i < len; i++) {
            var path = new Microsoft.Maps.Polyline([locs[i], locs[i + 1]], { strokeColor: '#93c5fd', strokeThickness: 3 });

            var d = Microsoft.Maps.SpatialMath.Geometry.distance(clickloc, path);

            if (d < minDistance) {
                minDistance = d;
                lineSegment = {
                    startIdx: i,
                    endIdx: i + 1,
                    path: path
                };
            }
        }

        return lineSegment;
    }

    // Find Route
    function directionsUpdated(e) {
        dataLayer.clear();

        //Get the current route.
        var currentRoute = directionsManager.getCurrentRoute();

        if (!currentRoute) {
            alert('No route found.');
            return;
        }

        var routeRequest = directionsManager.getRequestOptions();

        //Get the route mode.
        var routeMode = getRouteMode(routeRequest);

        if (!routeMode) {
            alert('Transit mode is not supported for near route queries.');
            return;
        }

        //Create a query to get data that is near a route.
        var queryOptions = {
            // queryUrl: sdsDataSourceUrl,
            // spatialfilter: {
            //     spatialfiltertype: 'nearroute',
            //     start: "21 đường số 6",
            //     end: "71 xuân hồng",
            //     travelmode: routemode,
            //     optimize: getrouteoptimization(routerequest)
            // }
        };

        //Process the query.
        Microsoft.Maps.SpatialDataService.QueryAPIManager.search(queryOptions, map, function (data) {
            //Add results to the map.
            dataLayer.add(data);
        });
    }

    function getRouteMode(routeRequest) {
        switch (routeRequest.routeMode) {
            case Microsoft.Maps.Directions.RouteMode.driving:
                return 'Driving';
            case Microsoft.Maps.Directions.RouteMode.walking:
                return 'Walking';
        }

        return null;
    }

    function getRouteOptimization(routeRequest) {
        switch (routeRequest.routeOptimize) {
            case Microsoft.Maps.Directions.RouteOptimization.timeWithTraffic:
                return 'timeWithTraffic';
            case Microsoft.Maps.Directions.RouteOptimization.shortestDistance:
                return 'distance';
            case Microsoft.Maps.Directions.RouteOptimization.shortestTime:
            default:
                return 'time';
        }
    }

    function shapeClicked(e) {
        //Make sure the infobox has data to display.
        if (e.primitive.data) {
            //Set the infobox options with the data of the pushpin.
            infobox.setOptions({
                location: e.primitive.getLocation(),
                title: e.primitive.data.Name,
                description: 'Store Type: ' + e.primitive.data.StoreType,
                visible: true
            });
        }
    }

    function unaffectedClocks(clockData, faultyClock) {
        const n = clockData.length;
        const affected = [];

        function dfs(clock) {
            affected.push(clock);
            for (let i = 0; i < n; i++) {
                if (clockData[clock][i] === '1' && !affected.includes(i)) {
                    dfs(i);
                }
            }
        }

        dfs(faultyClock);
        const unaffected = [];
        for (let i = 0; i < n; i++) {
            if (!affected.includes(i) && i !== faultyClock) {
                unaffected.push(i);
            }
        }
        return unaffected;
    }

    function isAffected(clockData, faultyClock) {
        const n = clockData.length;
        const affected = [];

        function dfs(clock) {
            affected.push(clock);
            for (let i = 0; i < n; i++) {
                if (clockData[clock][i] === '1' && !affected.includes(i)) {
                    dfs(i);
                }
            }
        }

        dfs(faultyClock);
        return affected;
    }

    function getStatusWaterClockDisplay(status) {
        switch (status) {
            case 1: return "Ổn định";
            case 2: return "Đang sửa chữa";
            case 3: return "Bảo trì";
            case 4: return "Hỏng";
            default: return "Chưa cập nhật"
        }
    }
    function getColorWaterClockByStatus(status) {
        switch (status) {
            case 1: return "#16a34a";
            case 2: return "#f59e0b";
            case 3: return "#9333ea";
            case 4: return "#e11d48";
            default: return "gray"
        }
    }

    function handleCheckWaterClock(id) {
        console.log("id", id)
        $.ajax({
            type: "GET",
            url: '@Url.Action("PathFromPontInMatrix", "GisLayers")',
            data: {
                waterClockId: id
            },
            success: function (res) {
                console.log("res", res)
            }
        });


        // const index = +id - 1


        // const safe = unaffectedClocks(matrixConnection, index)
        // const infested = isAffected(matrixConnection, index)
        // console.log("safe", safe)
        // console.log("infested", infested)
    }
</script>