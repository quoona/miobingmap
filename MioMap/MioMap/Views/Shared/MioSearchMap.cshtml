
<style>


    .map-info-container {
        background: white;
        width: 350px;
        box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px;
        border-radius: 10px;
        padding: 10px;
    }

    .map-info-image {
        width: 100%;
    }

        .map-info-image img {
            width: inherit;
            height: 100px;
            object-fit: cover;
            border-radius: 8px 8px 0 0
        }

    .map-info-header {
        margin: 10px 0;
    }

        .map-info-header p {
            padding: 0;
            margin: 0;
            color: #312e81;
            font-weight: bold;
        }

        .map-info-header .title {
            font-size: 24px;
        }

        .map-info-header .address {
            font-size: 16px;
        }

    .map-info-content .attribute {
        display: flex;
        gap: 20px;
    }

        .map-info-content .attribute .property {
            font-weight: bold;
        }

    .map-info-action {
        display: flex;
        gap: 10px;
        justify-content: end;
    }

        .map-info-action button {
            cursor: pointer;
            border: 0;
            padding: 10px;
            -webkit-border-radius: 5px;
            -moz-border-radius: 5px;
            border-radius: 5px;
            display: block;
            text-decoration: none;
            text-align: center;
            font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
            font-size: 16px;
        }

            .map-info-action button:hover {
                opacity: .9;
                -webkit-transition: background-color 1s ease-in;
                -moz-transition: background-color 1s ease-in;
                -o-transition: background-color 1s ease-in;
                transition: background-color 1s ease-in;
            }


    /* Control the colour scheme */

    .btn-direction {
        color: #FFF;
        background: #1e40af;
        -webkit-box-shadow: 0 3px 1px #1e40af;
        -moz-box-shadow: 0 3px 1px #1e40af;
        box-shadow: 0 3px 1px #1e40af;
    }

    .btn-other {
        color: #FFF;
        background: #fb7185;
        -webkit-box-shadow: 0 3px 1px #fb7185;
        -moz-box-shadow: 0 3px 1px #fb7185;
        box-shadow: 0 3px 1px #fb7185;
    }
</style>

<div style="display:flex">
    <div id="myMap" style="width:70%;height:80vh"></div>
    <div style="width:30%">
        <div id="layerList"></div>
        <input id="searchKeyword" type="text" minlength="3" />
        <button id="searchBtn">Tìm kiếm</button>
        <div id="searchResult">

        </div>
    </div>
</div>




<script type='text/javascript'>
    var map = null;
    var tooltip = null;
    var tooltipTemplate = '<div style="background-color:white;height:100px;width:150px;padding:5px;text-align:center; border-radius: 15px; padding:10px"><b>{title}</b></div>';



    function GetMap() {

        map = new Microsoft.Maps.Map('#myMap', {
            credentials: 'Amuk1_zODINIvN2YrHfOFxxScGfe8LhyPJvz37PbrCTQhZEWgkFXJvk7OcsM5SIK',
            center: new Microsoft.Maps.Location(10.742767792534757, 106.69918865817564),
            mapTypeId: Microsoft.Maps.MapTypeId.road,
            zoom: 18
        });


        $(document).ready(() => {
            $.ajax({
                type: "GET",
                url: '@Url.Action("GeLayersAsJson", "GisLayers")',
                cache: false,
                contentType: false,
                processData: false,
                success: function (res) {
                    res.forEach(item => {
                        const layer = new Microsoft.Maps.Layer(item.title);
                        item.waterPiplines.forEach(pipline => {
                            layer.add(createPolyline(pipline));
                        });
                        map.layers.insert(layer);
                        // map.entities.push(createPolyline(item));
                    });
                }
            });


            $.ajax({
                type: "GET",
                url: '@Url.Action("GetWaterClockAsJson", "WaterClocks")',
                cache: false,
                contentType: false,
                processData: false,
                success: function (res) {
                    res.forEach(item =>
                        addPinAndInfoBoxFromAction(map, item.lat, item.long, item.title, item.description, item.infoBoxTitle, item.infoBoxDescription))
                }
            });

            // $.ajax({
            //     type: "GET",
            //     url: "@Url.Action("GetWaterPiplinesAsJson", "WaterPiplines")",
            //     cache: false,
            //     contentType: false,
            //     processData: false,
            //     success: function (res) {
            //         res.forEach(item => {
            //             map.entities.push(createPolyline(item));
            //         });
            //     }
            // });

            $('#searchBtn').on('click', () => {
                const keyword = $('#searchKeyword').val();
                const searchResultDiv = $('#searchResult');
                $.ajax({
                    //data: formData,
                    type: "GET",
                    url: `@Url.Action("GetWaterPiplinesAsJson", "WaterPiplines")?keyword=${keyword}`,
                    cache: false,
                    contentType: false,
                    processData: false,
                    success: function (res) {
                        searchResultDiv.html();
                        res.forEach(item => {
                            searchResultDiv.append(`
                                <div 
                                    onclick="handleClickSearchItem(${item.lat1}, ${item.long1}, ${item.lat2}, ${item.long2})"
                                    style="cursor: pointer; margin: 10px 0; border: 1px solid red; padding: 4px"
                                >
                                    ${item.title}
                                </div>
                            `);
                        });
                        
                    }
                });
            });
        });
    
    }

    function addPin(e, map) {
        //Create custom Pushpin
        console.log(e)
        var point = new Microsoft.Maps.Point(e.getX(), e.getY());
        var loc = e.target.tryPixelToLocation(point);

        //var title = prompt("Enter title for pushpin:");
        //var subTitle = prompt("Enter subtitle for pushpin:");

        pushpin = new Microsoft.Maps.Pushpin(loc, {
            //icon: 'pin.png',
            //anchor: new Microsoft.Maps.Point(12, 39),
            color: 'red',
            //title: title,
            //subTitle: subTitle,
            title: "21 đường số 6",
            subTitle: "Tân hưng",
            //text: '1'
        });

        //Add the pushpin to the map
        map.entities.push(pushpin);
        showInfoBox(map, loc);
    }

    function showInfoBox(map, loc) {
        var infobox;
        infobox = new Microsoft.Maps.Infobox(loc, {
            title: 'Title',
            description: 'Description',
            visible: false,
            //minHeight: 400,
            //minWidth: 400,
            actions: [{
                label: 'Handler1',
                eventHandler: function () {
                    alert('Handler1');
                }
            }, {
                label: 'Handler2',
                eventHandler: function () {
                    alert('Handler2');
                }
            }]
        });

        infobox.setMap(map);

        Microsoft.Maps.Events.addHandler(pushpin, 'click', function (e) {
            infobox.setOptions({
                visible: true,
                showCloseButton: true,
                offset: new Microsoft.Maps.Point(0, 25)
            });
        });
    }

    function getIntersectionPoint(line1, line2) {
        // Extract coordinates of the endpoints of the first line.
        const fx1 = line1.geometry.x[0];
        const fy1 = line1.geometry.y[0];
        const fx2 = line1.geometry.x[1];
        const fy2 = line1.geometry.y[1];
        // getting function f1(x) = a1*x + b1
        const a1 = (fy2 - fy1) / (fx2 - fx1);
        const b1 = fy1 - (fx1 * a1);

        // Extract coordinates of the endpoints of the second line.
        const dx1 = line2.geometry.x[0];
        const dy1 = line2.geometry.y[0];
        const dx2 = line2.geometry.x[1];
        const dy2 = line2.geometry.y[1];
        // getting function f2(x) = a2*x + b2
        const a2 = (dy2 - dy1) / (dx2 - dx1);
        const b2 = dy1 - (dx1 * a2);

        if (a1 === a2) {
            // parallel (maybe duplicate if b1 === b2)
            return null;
        }

        const intersectionX = (b2 - b1) / (a1 - a2);
        const intersectionY = (a1 * intersectionX) + b1;

        const point = { intersectionX, intersectionY };
        return point;
    }

    function addPinAndInfoBoxFromAction(map, lat, long, title, description, infoBoxTitle, infoBoxDescription) {
        var infobox;

        var infoboxTemplate = 
        `<div class="map-info-container">
            <div class="map-info-image">
                <img src="https://media-cdn.tripadvisor.com/media/photo-s/07/36/55/06/bermondsey-street-coffee.jpg" alt="img"/>
            </div>
            <div class="map-info-body">
                <div class="map-info-header">
                    <p class="title">{title}</h3>
                    <p class="address">{address}</h3>
                </div>
                <div class="map-info-content">
                    <div class="attribute">
                        <span class="property">Tình trạng</span><span lass="value">{status}</span>
                    </div>
                    <div class="attribute">
                        <span class="property">Trạng thái</span><span lass="value">{active}</span>
                    </div>
                    <div>
                        <p>{description}</p>
                    </div>
                </div>
                <div class="map-info-action">
                    <button class="btn-direction">Chỉ đường</button>
                    <button class="btn-other">Action khác</button>
                    <button class="btn-other" id="close-btn-${lat}">Đóng</button>
                </div>
            </div>
        </div>`;

        var loc = new Microsoft.Maps.Location(lat, long)

       var pushpin  = new Microsoft.Maps.Pushpin(loc, {
            //icon: 'pin.png',
            //anchor: new Microsoft.Maps.Point(12, 39),
            color: 'red',
            //title: title,
            //subTitle: subTitle,
            title: title,
            subTitle: description,
            //text: '1'
        });

        //console.log(pushpin)

        //Add the pushpin to the map
        map.entities.push(pushpin);

        infobox = new Microsoft.Maps.Infobox(loc,
            {
            //title: infoBoxTitle,
            //description: infoBoxDescription,
            visible: false,
                htmlContent: infoboxTemplate
                    .replace('{title}', infoBoxTitle)
                    .replace('{address}', "")
                    .replace('{status}', "")
                    .replace('{active}', "")
                    .replace('{description}', infoBoxDescription)
        }
        );

        infobox.setMap(map);

        Microsoft.Maps.Events.addHandler(pushpin, 'mouseover', function (e) { pushpinHovered(e, infobox, infoBoxTitle) });
        Microsoft.Maps.Events.addHandler(pushpin, 'mouseout', closeTooltip);

        Microsoft.Maps.Events.addHandler(infobox, 'click', function (e) {
            if (e.originalEvent.target.id === `close-btn-${lat}`) {
                infobox.setOptions({ visible: false });
            }
        });

        Microsoft.Maps.Events.addHandler(pushpin, 'click', function (e) {
            closeTooltip();
            infobox.setOptions({
                visible: true,
                showCloseButton: true,
                offset: new Microsoft.Maps.Point(0, 25)
            });
        });


        tooltip = new Microsoft.Maps.Infobox(loc, {
            visible: false,
            showPointer: false,
            showCloseButton: false,
            offset: new Microsoft.Maps.Point(0, 25)
        });

        tooltip.setMap(map);
    }

    function pushpinHovered(e, infobox, infoboxTitle) {
        //Hide the infobox
        infobox.setOptions({ visible: false });
        tooltip.setOptions({
            location: e.target.getLocation(),
            htmlContent: tooltipTemplate.replace('{title}', infoboxTitle),
            visible: true
        });
    }

    function closeTooltip() {
        //Close the tooltip.
        tooltip.setOptions({
            visible: false
        });
    }

    function createPolyline (polylineData) {
        const { lat1, long1, lat2, long2, title, description, infoBoxTitle, infoBoxDescription, tags } = polylineData

        const polyline = new Microsoft.Maps.Polyline([
            new Microsoft.Maps.Location(lat1, long1),
            new Microsoft.Maps.Location(lat2, long2),
        ], {
            strokeColor: 'blue',
            strokeThickness: 4,
            visible: true
        });
        polyline.metadata = tags;
        return polyline;
    };

    function handleClickSearchItem(lat1, long1, lat2, long2) {
        const lat = (lat1 + lat2) / 2;
        const long = (long1 + long2) / 2;
        map.setView({
            // mapTypeId: Microsoft.Maps.MapTypeId.aerial,
            center: new Microsoft.Maps.Location(lat, long),
            zoom: 18
        });
    };

</script>