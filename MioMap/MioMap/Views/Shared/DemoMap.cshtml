<style>
    .directionsContainer {
        padding: 0 20px;
        background: white;
        position: absolute;
        z-index: 999999;
        width: 380px;
        height: 100%;
        overflow-y: auto;
        /* transform: translateX(-100%);  */
        /* opacity: 0; */
        float: left;
    }

    /*      #myMap {
                                 position: relative;
                                 width: calc(100% - 380px);
                                 height: 100%;
                                 float: left;
                             } */

    /* MAP INFO BOX */


    .map-info-container {
        background: white;
        width: 350px;
        box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px;
        border-radius: 10px;
        padding: 10px;
    }

    .map-info-image {
        width: 100%;
    }

        .map-info-image img {
            width: inherit;
            height: 100px;
            object-fit: cover;
            border-radius: 8px 8px 0 0
        }

    .map-info-header {
        margin: 10px 0;
    }

        .map-info-header p {
            padding: 0;
            margin: 0;
            color: #312e81;
            font-weight: bold;
        }

        .map-info-header .title {
            font-size: 24px;
        }

        .map-info-header .address {
            font-size: 16px;
        }

    .map-info-content .attribute {
        display: flex;
        gap: 20px;
    }

        .map-info-content .attribute .property {
            font-weight: bold;
        }

    .map-info-action {
        display: flex;
        gap: 10px;
        justify-content: end;
    }

        .map-info-action button {
            cursor: pointer;
            border: 0;
            padding: 8px;
            -webkit-border-radius: 5px;
            -moz-border-radius: 5px;
            border-radius: 5px;
            display: block;
            text-decoration: none;
            text-align: center;
            font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
            font-size: 14px;
        }

            .map-info-action button:hover {
                opacity: .9;
                -webkit-transition: background-color 1s ease-in;
                -moz-transition: background-color 1s ease-in;
                -o-transition: background-color 1s ease-in;
                transition: background-color 1s ease-in;
            }


    /* Control the colour scheme */

    .btn-blue {
        color: #FFF;
        background: #1e40af;
        -webkit-box-shadow: 0 3px 1px #1e40af;
        -moz-box-shadow: 0 3px 1px #1e40af;
        box-shadow: 0 3px 1px #1e40af;
    }

    .btn-light {
        color: black;
        background: #f1f5f9;
        -webkit-box-shadow: 0 3px 1px #f1f5f9;
        -moz-box-shadow: 0 3px 1px #f1f5f9;
        box-shadow: 0 3px 1px #f1f5f9;
    }
</style>

@* <div>
    <nav class="nav-main">
        <label>
            <label for="find-direction" class="label-direction">Chỉ đường</label>
            <input type="checkbox" id="find-direction" />
            <ul class="direction-panel">
                <li><a><i class="fa fa-times pointer"></i></a></li>
                <label for="find-direction" class="label-direction">DDosng</label>
                <div class="directionsContainer">
                    <div id="directionsPanel"></div>
                    <div id="directionsItinerary"></div>
                </div>
            </ul>
        </label>
    </nav>
    <section>
        <div class="directionsContainer">
            <div id="directionsPanel"></div>
            <div id="directionsItinerary"></div>
        </div>
        <div id="myMap" style="width:100%;height:80vh"></div>
    </section>
    <footer></footer>
</div>
 *@


<div class="directionsContainer">
    <div id="directionsPanel"></div>
    <div id="directionsItinerary"></div>
</div>
<div id="myMap" style="width:100%;height:80vh"></div>

<script type='text/javascript'>
    var map, tooltip, highlightLayer, dataLayer, directionsManager;
    var tooltipTemplate = '<div style="background-color:white;height:100px;width:150px;padding:5px;text-align:center; border-radius: 15px; padding:10px"><b>{title}</b></div>';

    // URL NÀY KHÔNG BIẾT LẤY TỪ ĐÂU: ĐANG LẤY CỦA DOCS ĐỂ DEMO
    var sdsDataSourceUrl = 'https://spatial.virtualearth.net/REST/v1/data/20181f26d9e94c81acdf9496133d4f23/FourthCoffeeSample/FourthCoffeeShops';

    const apiEndpoitGetAddressByCoor = 'http://dev.virtualearth.net/REST/v1/Locations/${}?includeEntityTypes=Address,PopulatedPlace,CountryRegion&key=Amuk1_zODINIvN2YrHfOFxxScGfe8LhyPJvz37PbrCTQhZEWgkFXJvk7OcsM5SIK&setMkt=vi-VN'

    // INIT DATA
    const polylineData = [
        {
            polylineId: 1,
            geometry: [
                {
                    lat: 10.742932117315206,
                    long: 106.69775635856169,
                },
                {
                    lat: 10.742716145233672,
                    long: 106.6990009035446,
                },
                {
                    lat: 10.742289468228435,
                    long: 106.69887215751189,
                },
                {
                    lat: 10.742041889936672,
                    long: 106.70016498225706,
                }
            ],
        },
        {
            polylineId: 2,
            geometry: [
                {
                    lat: 10.742932117315206,
                    long: 106.69775635856169,
                },
                {
                    lat: 10.742473834909632,
                    long: 106.6976678456642,
                },
                {
                    lat: 10.742318440142938,
                    long: 106.69871122497099,
                },
                {
                    lat: 10.741878593505504,
                    long: 106.69863612311858,
                },
                {
                    lat: 10.741393293609661,
                    long: 106.69854492801207,
                }
            ],
        },
        {
            polylineId: 3,
            geometry: [
                {
                    lat: 10.741393293609661,
                    long: 106.69854492801207,
                },
                {
                    lat: 10.741300648101344,
                    long: 106.69896067040938,
                },
                {
                    lat: 10.741100477779,
                    long: 106.69998527425307,
                },
                {
                    lat: 10.74102146314155,
                    long: 106.70036614793318,
                },
                {
                    lat: 10.740952983772374,
                    long: 106.70042515653151,
                },
                {
                    lat: 10.740594783742182,
                    long: 106.70038224118727,
                }
            ],
        },
        {
            polylineId: 4,
            geometry: [
                {
                    lat: 10.741350474803696,
                    long: 106.69877023356932,
                },
                {
                    lat: 10.740860584123823,
                    long: 106.69868440288084,
                },
            ],
        },
        {
            polylineId: 5,
            geometry: [
                {
                    lat: 10.742485710506685,
                    long: 106.69767452729853,
                },
                {
                    lat: 10.742022159797969,
                    long: 106.69759942544611,
                },
                {
                    lat: 10.74155334074392,
                    long: 106.69750823033961,
                },
                {
                    lat: 10.741068718035507,
                    long: 106.69742776406916,
                }
            ],
        },
        {
            polylineId: 6,
            geometry: [
                {
                    lat: 10.74186279062036,
                    long: 106.69858784335631,
                },
                {
                    lat: 10.742305271091226,
                    long: 106.69605583804625,
                },
            ],
        },
        {
            polylineId: 7,
            geometry: [
                {
                    lat: 10.74141259067531,
                    long: 106.69852883475798,
                },
                {
                    lat: 10.741802395514696,
                    long: 106.69608802455443,
                }
            ],
        }
    ]
    const pointData = [
        {
            geometry: {
                lat: 10.742932117315178, // x
                long: 106.69775233524817, // y
            },
            options: {
                // color: 'red',
            },
            metadata: {
                color: 'red',
                name: "Van số 001",
                address: '21 Đường số 6, KDC Him Lam, Tân Hưng, Q7, TP Hồ Chí Minh',
                description: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. ",
                status: 'Ổn định',
                isActive: true,
                polylineIds: [1, 2]
            }
        },
        {
            geometry: {
                lat: 10.742724046654033, // x
                long: 106.69899017470854, // y
            },
            options: {
                // color: 'red',
            },
            metadata: {
                color: 'red',
                name: "Van số 002",
                address: '21 Đường số 6, KDC Him Lam, Tân Hưng, Q7, TP Hồ Chí Minh',
                description: "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                status: 'Ổn định',
                isActive: true,
                polylineIds: [1]
            }
        },
        {
            geometry: {
                lat: 10.742302637280815, // x
                long: 106.6988748397209, // y
            },
            options: {
                // color: 'red',
            },
            metadata: {
                color: 'red',
                name: "Van số 003",
                address: 'LOTTE Mart Quận 7, Đường Nguyễn Hữu Thọ, Tân Hưng, District 7, Ho Chi Minh City',
                description: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. ",
                status: 'Ổn định',
                isActive: true,
                polylineIds: [1]
            }
        },
        {
            geometry: {
                lat: 10.742157777672958, // x
                long: 106.69957221406477, // y
            },
            options: {
                // color: 'red',
            },
            metadata: {
                color: 'red',
                name: "Van số 004",
                address: '21 Đường số 6, KDC Him Lam, Tân Hưng, Q7, TP Hồ Chí Minh',
                description: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. ",
                status: 'Ổn định',
                isActive: true,
                polylineIds: [1]
            }
        },
        {
            geometry: {
                lat: 10.742476468718522, // x
                long: 106.69765979903715, // y
            },
            options: {
                // color: 'red',
            },
            metadata: {
                color: 'red',
                name: "Van số 005",
                address: '21 Đường số 6, KDC Him Lam, Tân Hưng, Q7, TP Hồ Chí Minh',
                description: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. ",
                status: 'Ổn định',
                isActive: true,
                polylineIds: [5]
            }
        },
        {
            geometry: {
                lat: 10.742318440142924, // x
                long: 106.69870854276198, // y
            },
            options: {
                // color: 'red',
            },
            metadata: {
                color: 'red',
                name: "Van số 006",
                address: '21 Đường số 6, KDC Him Lam, Tân Hưng, Q7, TP Hồ Chí Minh',
                description: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. ",
                status: 'Ổn định',
                isActive: true,
                polylineIds: [2]
            }
        },
        {
            geometry: {
                lat: 10.74187332587718, // x
                long: 106.69858073902762, // y
            },
            options: {
                // color: 'red',
            },
            metadata: {
                color: 'red',
                name: "Van số 007",
                address: '21 Đường số 6, KDC Him Lam, Tân Hưng, Q7, TP Hồ Chí Minh',
                description: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. ",
                status: 'Ổn định',
                isActive: true,
                polylineIds: [6]
            }
        },
        {
            geometry: {
                lat: 10.741636282509404, // x
                long: 106.69857537460959, // y
            },
            options: {
                // color: 'red',
            },
            metadata: {
                color: 'red',
                name: "Van số 008",
                address: '21 Đường số 6, KDC Him Lam, Tân Hưng, Q7, TP Hồ Chí Minh',
                description: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. ",
                status: 'Ổn định',
                isActive: true,
                polylineIds: [2]
            }
        },
        {
            geometry: {
                lat: 10.741404506592133, // x
                long: 106.69855123472846, // y
            },
            options: {
                // color: 'red',
            },
            metadata: {
                color: 'red',
                name: "Van số 009",
                address: '21 Đường số 6, KDC Him Lam, Tân Hưng, Q7, TP Hồ Chí Minh',
                description: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. ",
                status: 'Ổn định',
                isActive: true,
                polylineIds: [2, 3]
            }
        },
        {
            geometry: {
                lat: 10.741349196403746, // x
                long: 106.69876849365866, // y
            },
            options: {
                // color: 'red',
            },
            metadata: {
                color: 'red',
                name: "Van số 010",
                address: '21 Đường số 6, KDC Him Lam, Tân Hưng, Q7, TP Hồ Chí Minh',
                description: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. ",
                status: 'Ổn định',
                isActive: true,
                polylineIds: [4]
            }
        },
        {
            geometry: {
                lat: 10.742043384190637, // x
                long: 106.69760086278184, // y
            },
            options: {
                // color: 'red',
            },
            metadata: {
                color: 'red',
                name: "Van số 011",
                address: '21 Đường số 6, KDC Him Lam, Tân Hưng, Q7, TP Hồ Chí Minh',
                description: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. ",
                status: 'Ổn định',
                isActive: true,
                polylineIds: [5, 6]
            }
        },
        {
            geometry: {
                lat: 10.741577198986306, // x
                long: 106.69750698546632, // y
            },
            options: {
                // color: 'red',
            },
            metadata: {
                color: 'red',
                name: "Van số 012",
                address: '21 Đường số 6, KDC Him Lam, Tân Hưng, Q7, TP Hồ Chí Minh',
                description: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. ",
                status: 'Ổn định',
                isActive: true,
                polylineIds: [5, 7]
            }
        },
        {
            geometry: {
                lat: 10.741798439511982, // x
                long: 106.69607867268783, // y
            },
            options: {
                // color: 'red',
            },
            metadata: {
                color: 'red',
                name: "Van số 013",
                address: '21 Đường số 6, KDC Him Lam, Tân Hưng, Q7, TP Hồ Chí Minh',
                description: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. ",
                status: 'Ổn định',
                isActive: true,
                polylineIds: [7]
            }
        },
        {
            geometry: {
                lat: 10.741051001401715, // x
                long: 106.70032366726005, // y
            },
            options: {
                // color: 'red',
            },
            metadata: {
                color: 'red',
                name: "Van số 014",
                address: '645 Đ. Nguyễn Hữu Thọ, Tân Phong, Quận 7, Thành phố Hồ Chí Minh, Vietnam',
                description: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. ",
                status: 'Ổn định',
                isActive: true,
                polylineIds: [3]
            }
        },
        {
            geometry: {
                lat: 10.740948282352164, // x
                long: 106.70041620347106, // y
            },
            options: {
                // color: 'red',
            },
            metadata: {
                color: 'red',
                name: "Van số 015",
                address: '21 Đường số 6, KDC Him Lam, Tân Hưng, Q7, TP Hồ Chí Minh',
                description: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. ",
                status: 'Ổn định',
                isActive: true,
                polylineIds: [3]
            }
        },
        {
            geometry: {
                lat: 10.741496690216891, // x
                long: 106.69802820397055, // y
            },
            options: {
                // color: 'red',
            },
            metadata: {
                color: 'red',
                name: "Van số 016",
                address: '21 Đường số 6, KDC Him Lam, Tân Hưng, Q7, TP Hồ Chí Minh',
                description: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. ",
                status: 'Ổn định',
                isActive: true,
                polylineIds: [7]
            }
        },
        {
            geometry: {
                lat: 10.742226256768973, // x
                long: 106.69660837310332, // y
            },
            options: {
                // color: 'red',
            },
            metadata: {
                color: 'red',
                name: "Van số 017",
                address: '21 Đường số 6, KDC Him Lam, Tân Hưng, Q7, TP Hồ Chí Minh',
                description: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. ",
                status: 'Ổn định',
                isActive: true,
                polylineIds: [6]
            }
        },
    ]
    // END INIT

    function GetMap() {
        map = new Microsoft.Maps.Map('#myMap', {
            credentials: 'Amuk1_zODINIvN2YrHfOFxxScGfe8LhyPJvz37PbrCTQhZEWgkFXJvk7OcsM5SIK',
            center: new Microsoft.Maps.Location(10.742767792534757, 106.69918865817564),
            mapTypeId: Microsoft.Maps.MapTypeId.road,
            zoom: 18
        });


      
        // RENDER POLYLINES - PIPELINE
        Microsoft.Maps.loadModule('Microsoft.Maps.SpatialMath', function () {
            polylineData?.map(pol => {
                const _locations = pol?.geometry?.map(item => {
                    return new Microsoft.Maps.Location(item?.lat, item?.long)
                })
                const _pol = new Microsoft.Maps.Polyline(_locations, {
                    strokeColor: '#1e40af',
                    strokeThickness: 4
                })

                map.entities.push(_pol);
            })
            highlightLayer = new Microsoft.Maps.Layer();
            map.layers.insert(highlightLayer);
        });

        // RENDER POINT/PIN - WaterClock
        pointData?.forEach(point => {
            const loc = new Microsoft.Maps.Location(point.geometry.lat, point.geometry.long)
            const options = point?.options


            const pushpin = new Microsoft.Maps.Pushpin(loc, options);
            pushpin.metadata = point?.metadata;

            const { metadata, geometry } = point;

            addPinAndInfoBoxFromAction(
                map,
                geometry.lat,
                geometry.long,
                metadata.name,
                metadata.description,
                metadata.name,
                metadata.description,
                metadata
            )

        })


        //$(document).ready(function () {
        //    $.ajax({
        //        //data: formData,
        //        type: "GET",
        //        url: '@Url.Action("GetWaterClockAsJson", "WaterClocks")',
        //        cache: false,
        //        contentType: false,
        //        processData: false,
        //        success: function (res) {
        //            //console.log(res)
        //            res.forEach(item =>
        //                addPinAndInfoBoxFromAction(map, item.lat, item.long, item.title, item.description, item.infoBoxTitle, item.infoBoxDescription))
        //        }
        //    });
        //})


        //Create a layer for rendering the data that is along a route.
        dataLayer = new Microsoft.Maps.Layer();

        //Add the layer to the map.
        map.layers.insert(dataLayer);

        //Add click event to shapes in the data layer.
        Microsoft.Maps.Events.addHandler(dataLayer, 'click', shapeClicked);

        //Create an infobox at the center of the map but don't show it.
        infobox = new Microsoft.Maps.Infobox(map.getCenter(), {
            visible: false
        });

        //Assign the infobox to a map instance.
        infobox.setMap(map);


        Microsoft.Maps.loadModule(['Microsoft.Maps.Directions', 'Microsoft.Maps.SpatialDataService'], function () {
            //Create an instance of the directions manager.
            directionsManager = new Microsoft.Maps.Directions.DirectionsManager(map);

            //Specify where to display the route instructions.
            directionsManager.setRenderOptions({ itineraryContainer: '#directionsItinerary' });

            //Specify the where to display the input panel
            directionsManager.showInputPanel('directionsPanel');

            //Add event handler to directions manager.
            Microsoft.Maps.Events.addHandler(directionsManager, 'directionsUpdated', directionsUpdated);
        });


        Microsoft.Maps.loadModule('Microsoft.Maps.Directions', function () {
            //Create an instance of the directions manager.
            directionsManager = new Microsoft.Maps.Directions.DirectionsManager(map);

            //Create waypoints to route between.
            directionsManager.addWaypoint(new Microsoft.Maps.Directions.Waypoint({ address: '21 Đ. số 6, Tân Hưng, Quận 7, Thành phố Hồ Chí Minh, Vietnam' }));
            directionsManager.addWaypoint(new Microsoft.Maps.Directions.Waypoint({ address: 'Số 56 Đ. Số 10, Khu dân cư Him Lam, Quận 7, Thành phố Hồ Chí Minh, Vietnam' }));

            //Set the request options that avoid highways and uses kilometers.
            directionsManager.setRequestOptions({
                distanceUnit: Microsoft.Maps.Directions.DistanceUnit.km,
                routeAvoidance: [Microsoft.Maps.Directions.RouteAvoidance.avoidLimitedAccessHighway]
            });

            //Make the route line thick and green. Replace the title of waypoints with an empty string to hide the default text that appears.
            directionsManager.setRenderOptions({
                drivingPolylineOptions: {
                    strokeColor: 'green',
                    strokeThickness: 6
                },
                waypointPushpinOptions: {
                    title: ''
                }
            });

            //Calculate directions.
            directionsManager.calculateDirections();
            Microsoft.Maps.Events.addHandler(directionsManager, 'directionsUpdated', directionsUpdated);
        });

    }

    function addPin(e, map) {
        //Create custom Pushpin
        console.log(e)
        var point = new Microsoft.Maps.Point(e.getX(), e.getY());
        var loc = e.target.tryPixelToLocation(point);

        //var title = prompt("Enter title for pushpin:");
        //var subTitle = prompt("Enter subtitle for pushpin:");

        pushpin = new Microsoft.Maps.Pushpin(loc, {
            //icon: 'pin.png',
            //anchor: new Microsoft.Maps.Point(12, 39),
            color: 'red',
            //title: title,
            //subTitle: subTitle,
            title: "21 đường số 6",
            subTitle: "Tân hưng",
            //text: '1'
        });

        //Add the pushpin to the map
        map.entities.push(pushpin);
        showInfoBox(map, loc);
    }

    function showInfoBox(map, loc) {
        var infobox;
        infobox = new Microsoft.Maps.Infobox(loc, {
            title: 'Title',
            description: 'Description',
            visible: false,
            actions: [{
                label: 'Handler1',
                eventHandler: function () {
                    alert('Handler1');
                }
            }, {
                label: 'Handler2',
                eventHandler: function () {
                    alert('Handler2');
                }
            }]
        });

        infobox.setMap(map);

        Microsoft.Maps.Events.addHandler(pushpin, 'click', function (e) {
            infobox.setOptions({
                visible: true,
                showCloseButton: true,
                offset: new Microsoft.Maps.Point(0, 25)
            });
        });
    }

    function getIntersectionPoint(line1, line2) {
        // Extract coordinates of the endpoints of the first line.
        const fx1 = line1.geometry.x[0];
        const fy1 = line1.geometry.y[0];
        const fx2 = line1.geometry.x[1];
        const fy2 = line1.geometry.y[1];
        // getting function f1(x) = a1*x + b1
        const a1 = (fy2 - fy1) / (fx2 - fx1);
        const b1 = fy1 - (fx1 * a1);

        // Extract coordinates of the endpoints of the second line.
        const dx1 = line2.geometry.x[0];
        const dy1 = line2.geometry.y[0];
        const dx2 = line2.geometry.x[1];
        const dy2 = line2.geometry.y[1];
        // getting function f2(x) = a2*x + b2
        const a2 = (dy2 - dy1) / (dx2 - dx1);
        const b2 = dy1 - (dx1 * a2);

        if (a1 === a2) {
            // parallel (maybe duplicate if b1 === b2)
            return null;
        }

        const intersectionX = (b2 - b1) / (a1 - a2);
        const intersectionY = (a1 * intersectionX) + b1;

        const point = { intersectionX, intersectionY };
        return point;
    }

    function addPinAndInfoBoxFromAction(map, lat, long, title, description, infoBoxTitle, infoBoxDescription, metadata) {
        var infobox;

        var infoboxTemplate = `
                                                    <div class="map-info-container">
                                              <div class="map-info-image">
                                                <img src="https://media-cdn.tripadvisor.com/media/photo-s/07/36/55/06/bermondsey-street-coffee.jpg" alt="img" />
                                              </div>
                                              <div class="map-info-body">
                                                <div class="map-info-header">
                                                  <p class="title">{title}</h3>
                                                  <p class="address">{address}</h3>
                                                </div>
                                                <div class="map-info-content">
                                                  <div class="attribute">
                                                    <span class="property">Tình trạng</span><span lass="value">{status}</span>
                                                  </div>
                                                  <div class="attribute">
                                                    <span class="property">Trạng thái</span><span lass="value">{active}</span>
                                                  </div>
                                                  <div>
                                                    <p>{description}</p>
                                                  </div>
                                                </div>
                                                <div class="map-info-action">
                                                      <button class="btn-blue" onclick="getDirection('${metadata?.address}')">Chỉ đường</button>
                                                  <button class="btn-light" id="close-btn-${lat}">Đóng</button>
                                                </div>
                                              </div>
                                            </div>
                                                `;

        var loc = new Microsoft.Maps.Location(lat, long)

        var pushpin = new Microsoft.Maps.Pushpin(loc, {
            color: 'red',
            title: metadata?.name,
            // subTitle: metadata?.,
        });

        //console.log(pushpin)

        //Add the pushpin to the map
        map.entities.push(pushpin);


        const { name, address, status, isActive, description: _description } = metadata
        const _activeDisplay = isActive ? "Đang hoạt động" : "Đang đóng"
        infobox = new Microsoft.Maps.Infobox(loc,
            {
                //title: infoBoxTitle,
                //description: infoBoxDescription,
                visible: false,
                htmlContent: infoboxTemplate
                    .replace('{title}', name)
                    .replace('{address}', address)
                    .replace('{status}', status)
                    .replace('{active}', _activeDisplay)
                    .replace('{description}', _description)
            }
        );

        infobox.setMap(map);

        Microsoft.Maps.Events.addHandler(pushpin, 'mouseover', function (e) {
            // Hightlight
            pushpinHovered(e, infobox, infoBoxTitle, metadata)
            lineClicked(metadata?.polylineIds)
        });
        Microsoft.Maps.Events.addHandler(pushpin, 'mouseout', function (e) {
            closeTooltip()
            highlightLayer.clear();
        });

        Microsoft.Maps.Events.addHandler(infobox, 'click', function (e) {
            if (e.originalEvent.target.id === `close-btn-${lat}`) {
                infobox.setOptions({ visible: false });
            }
        });

        Microsoft.Maps.Events.addHandler(pushpin, 'click', function (e) {
            closeTooltip();
            infobox.setOptions({
                visible: true,
                showCloseButton: true,
                offset: new Microsoft.Maps.Point(0, 25)
            });
        });


        tooltip = new Microsoft.Maps.Infobox(loc, {
            visible: false,
            showPointer: false,
            showCloseButton: false,
            offset: new Microsoft.Maps.Point(0, 25)
        });

        tooltip.setMap(map);

        // GET DIRECTION

    }

    function getDirection(address) {
        console.log("address", address)


        navigator.geolocation.getCurrentPosition(async function (position) {
            console.log("position", position.coords)
            const { latitude, longitude } = position.coords
            // var loc = new Microsoft.Maps.Location(
            //     position.coords.latitude,
            //     position.coords.longitude);

            // //Add a pushpin at the user's location.
            // var pin = new Microsoft.Maps.Pushpin(loc);
            // map.entities.push(pin);

            // //Center the map on the user's location.
            // map.setView({ center: loc, zoom: 15 });


            const apiEndpoitGetAddressByCoor = `http:dev.virtualearth.net/REST/v1/Locations/${latitude},${longitude}?includeEntityTypes=Address,PopulatedPlace,CountryRegion&key=Amuk1_zODINIvN2YrHfOFxxScGfe8LhyPJvz37PbrCTQhZEWgkFXJvk7OcsM5SIK&setMkt=vi-VN`

            const response = await fetch(apiEndpoitGetAddressByCoor);
            const currentLocation = await response.json();

            const currentAddress = currentLocation?.resourceSets[0]?.resources[0]?.name


            Microsoft.Maps.loadModule('Microsoft.Maps.Directions', function () {
                //Create an instance of the directions manager.

                console.log("Did y run here!?")

                directionsManager = new Microsoft.Maps.Directions.DirectionsManager(map);

                //Create waypoints to route between.
                //directionsManager.addWaypoint(new Microsoft.Maps.Directions.Waypoint({ address: currentAddress }));
                //directionsManager.addWaypoint(new Microsoft.Maps.Directions.Waypoint({ address: address }));

                let startWaypoint = new Microsoft.Maps.Directions.Waypoint({ address: currentAddress });
                directionsManager.addWaypoint(startWaypoint);

                let endWaypoint = new Microsoft.Maps.Directions.Waypoint({ address: address });
                directionsManager.addWaypoint(endWaypoint);

                //Set the request options that avoid highways and uses kilometers.
                directionsManager.setRequestOptions({
                    distanceUnit: Microsoft.Maps.Directions.DistanceUnit.km,
                    routeAvoidance: [Microsoft.Maps.Directions.RouteAvoidance.avoidLimitedAccessHighway]
                });

                //Make the route line thick and green. Replace the title of waypoints with an empty string to hide the default text that appears.
                directionsManager.setRenderOptions({
                    drivingPolylineOptions: {
                        strokeColor: 'green',
                        strokeThickness: 6
                    },
                    waypointPushpinOptions: {
                        title: 'Hehe'
                    }
                });

                //Calculate directions.
                directionsManager.calculateDirections();
                // Microsoft.Maps.Events.addHandler(directionsManager, 'directionsUpdated', directionsUpdated);
            });

            console.log(currentLocation);
        });



    }

    function pushpinHovered(e, infobox, infoboxTitle, metadata) {
        //Hide the infobox
        infobox.setOptions({ visible: false });
        tooltip.setOptions({
            location: e.target.getLocation(),
            title: metadata.name,
            description: metadata.description,
            // htmlContent: tooltipTemplate.replace('{title}', infoboxTitle),
            visible: true
        });
    }

    function closeTooltip() {
        //Close the tooltip.
        tooltip.setOptions({
            visible: false
        });
    }

    function lineClicked(polylineIds) {
        highlightLayer.clear();

        // GET Polylines with IDS
        const polylines = polylineData.filter(pol => polylineIds.includes(pol?.polylineId))
        if (!polylines || polylines.length === 0) {
            alert("Van này không thuộc ống nào!")
            return
        }

        for (let poly of polylines) {
            const _locations = poly?.geometry?.map(item => {
                return new Microsoft.Maps.Location(item?.lat, item?.long)
            })

            // var  clickLocation = _locations[0];
            // var lineSegment = getLineSegment(clickLocation, _locations);

            // if (lineSegment) {
            //     highlightLayer.add(lineSegment.path);
            // }

            for (let loca of _locations) {
                var clickLocation = loca;
                var lineSegment = getLineSegment(clickLocation, _locations);

                if (lineSegment) {
                    highlightLayer.add(lineSegment.path);
                }
            }
        }
    }

    function getLineSegment(clickloc, locs) {
        var minDistance = Number.MAX_VALUE;
        var lineSegment = null;

        for (var i = 0, len = locs.length - 1; i < len; i++) {
            var path = new Microsoft.Maps.Polyline([locs[i], locs[i + 1]], { strokeColor: '#93c5fd', strokeThickness: 3 });

            var d = Microsoft.Maps.SpatialMath.Geometry.distance(clickloc, path);

            if (d < minDistance) {
                minDistance = d;
                lineSegment = {
                    startIdx: i,
                    endIdx: i + 1,
                    path: path
                };
            }
        }

        return lineSegment;
    }

    // Find Route
    function directionsUpdated(e) {
        dataLayer.clear();

        //Get the current route.
        var currentRoute = directionsManager.getCurrentRoute();

        if (!currentRoute) {
            alert('No route found.');
            return;
        }

        var routeRequest = directionsManager.getRequestOptions();

        //Get the route mode.
        var routeMode = getRouteMode(routeRequest);

        if (!routeMode) {
            alert('Transit mode is not supported for near route queries.');
            return;
        }

        //Create a query to get data that is near a route.
        var queryOptions = {
            // queryUrl: sdsDataSourceUrl,
            // spatialfilter: {
            //     spatialfiltertype: 'nearroute',
            //     start: "21 đường số 6",
            //     end: "71 xuân hồng",
            //     travelmode: routemode,
            //     optimize: getrouteoptimization(routerequest)
            // }
        };

        //Process the query.
        Microsoft.Maps.SpatialDataService.QueryAPIManager.search(queryOptions, map, function (data) {
            //Add results to the map.
            dataLayer.add(data);
        });
    }

    function getRouteMode(routeRequest) {
        switch (routeRequest.routeMode) {
            case Microsoft.Maps.Directions.RouteMode.driving:
                return 'Driving';
            case Microsoft.Maps.Directions.RouteMode.walking:
                return 'Walking';
        }

        return null;
    }

    function getRouteOptimization(routeRequest) {
        switch (routeRequest.routeOptimize) {
            case Microsoft.Maps.Directions.RouteOptimization.timeWithTraffic:
                return 'timeWithTraffic';
            case Microsoft.Maps.Directions.RouteOptimization.shortestDistance:
                return 'distance';
            case Microsoft.Maps.Directions.RouteOptimization.shortestTime:
            default:
                return 'time';
        }
    }

    function shapeClicked(e) {
        //Make sure the infobox has metadata to display.
        if (e.primitive.metadata) {
            //Set the infobox options with the metadata of the pushpin.
            infobox.setOptions({
                location: e.primitive.getLocation(),
                title: e.primitive.metadata.Name,
                description: 'Store Type: ' + e.primitive.metadata.StoreType,
                visible: true
            });
        }
    }
</script>