<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - MioMap</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/MioMap.styles.css" asp-append-version="true" />
    <meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests">
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container-fluid">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">MioMap</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Home</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="WaterClocks" asp-action="Index">Water Clock Manage</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2023 - MioMap - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
        </div>
    </footer>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>

    <!-- Reference to the Bing Maps SDK -->
    <script type='text/javascript'
            src='http://www.bing.com/api/maps/mapcontrol?callback=GetMap&key=Amuk1_zODINIvN2YrHfOFxxScGfe8LhyPJvz37PbrCTQhZEWgkFXJvk7OcsM5SIK&setMkt=vi-VN&setLang=vn'
            async defer></script>

    <script type='text/javascript'>

        var clickCount = 0;
        var startPoint;
        var endPoint;


        function GetMap() {
            var map = new Microsoft.Maps.Map('#myMap', {
                credentials: 'Amuk1_zODINIvN2YrHfOFxxScGfe8LhyPJvz37PbrCTQhZEWgkFXJvk7OcsM5SIK',
                center: new Microsoft.Maps.Location(10.742767792534757, 106.69918865817564),
                mapTypeId: Microsoft.Maps.MapTypeId.road,
                zoom: 18
            });

            //Add your post map load code here.

            Microsoft.Maps.Events.addHandler(map, 'click', function (e) { addPin(e, map); });
            Microsoft.Maps.Events.addHandler(map, 'dblclick', function (e) { dbClickToAddPolyline(e, map) });
            //var layer = new Microsoft.Maps.Layer();
            //layer.add(Microsoft.Maps.TestDataGenerator.getPolylines(5, map.getBounds()));

            ////Add layer to map.
            //map.layers.insert(layer);

            ////Define the tile source for the USGS Topo layer.
            //var usgsTopoTileSource = new Microsoft.Maps.TileSource({
            //    uriConstructor: 'https://tiledbasemaps.arcgis.com/arcgis/rest/services/World_Street_Map/MapServer/tile',
            //    minZoom: 1,
            //    maxZoom: 15
            //});

            ////Create a tile layer from the tile source
            //var usgsTopoTileLayer = new Microsoft.Maps.TileLayer({
            //    mercator: usgsTopoTileSource
            //});

            ////Add tile layer to the map.
            //map.layers.insert(usgsTopoTileLayer);

            //var polyline = new Microsoft.Maps.Polyline([
            //    new Microsoft.Maps.Location(47.60357, -122.32945),
            //    new Microsoft.Maps.Location(47.61494, -122.19596),
            //    new Microsoft.Maps.Location(47.54565, -122.04261)
            //], {
            //    strokeColor: 'red',
            //    strokeThickness: 5
            //});

            //map.entities.push(polyline);

            //Microsoft.Maps.Events.addHandler(polyline, 'mouseover', function (e) {
            //    polyline.setOptions({
            //        strokeColor: 'blue',
            //        strokeThickness: 10
            //    });
            //});

            //Microsoft.Maps.Events.addHandler(polyline, 'mouseout', function (e) {
            //    polyline.setOptions({
            //        strokeColor: 'red',
            //        strokeThickness: 5
            //    });
            //});

            //var polyline1 = new Microsoft.Maps.Polyline([
            //    new Microsoft.Maps.Location(10.742638694541522, 106.6991552602931),
            //    new Microsoft.Maps.Location(10.743052612326316, 106.69921712976702)
            //], {
            //    strokeColor: 'red',
            //    strokeThickness: 5
            //});

            //var polyline2 = new Microsoft.Maps.Polyline([
            //    new Microsoft.Maps.Location(10.742770395718855, 106.69884738600928),
            //    new Microsoft.Maps.Location(10.742631458212871, 106.69958098119665)
            //], {
            //    strokeColor: 'blue',
            //    strokeThickness: 5
            //});

            //map.entities.push(polyline1);
            //map.entities.push(polyline2);
            
            //// Find the intersection point.
            //const intersectionPoint = getIntersectionPoint(polyline1, polyline2);

            //var location = map.tryPixelToLocation(intersectionPoint)

            //console.log(location)

            //pushpin1 = new Microsoft.Maps.Pushpin(location, {
            //    //icon: 'pin.png',
            //    //anchor: new Microsoft.Maps.Point(12, 39),
            //    color: 'red',
            //    //title: title,
            //    //subTitle: subTitle,
            //    title: "21 đường số 6",
            //    subTitle: "Tân hưng",
            //    //text: '1'
            //});

            ////Add the pushpin1 to the map
            //map.entities.push(pushpin1);



        }


        function dbClickToAddPolyline(e, map) {
            //Check if this is the first or second click
            if (clickCount === 0) {
                startPoint = e.location;
                clickCount++;
            } else {
                endPoint = e.location;

                //Create a polyline
                var line = new Microsoft.Maps.Polyline([startPoint, endPoint], { strokeColor: 'red', strokeThickness: 3 });

                //Add the polyline to map
                map.entities.push(line);

                //Reset click count
                clickCount = 0;
            }
        }


        function addPin(e, map) {
            //Create custom Pushpin
            console.log(e)
            var point = new Microsoft.Maps.Point(e.getX(), e.getY());
            var loc = e.target.tryPixelToLocation(point);

            //var title = prompt("Enter title for pushpin:");
            //var subTitle = prompt("Enter subtitle for pushpin:");

            pushpin = new Microsoft.Maps.Pushpin(loc, {
                //icon: 'pin.png',
                //anchor: new Microsoft.Maps.Point(12, 39),
                color: 'red',
                //title: title,
                //subTitle: subTitle,
                title: "21 đường số 6",
                subTitle: "Tân hưng",
                //text: '1'
            });

            //Add the pushpin to the map
            map.entities.push(pushpin);
            showInfoBox(map, loc);
        }

        function showInfoBox(map, loc) {
            var infobox;
            infobox = new Microsoft.Maps.Infobox(loc, {
                title: 'Title',
                description: 'Description',
                visible: false,
                actions: [{
                    label: 'Handler1',
                    eventHandler: function () {
                        alert('Handler1');
                    }
                }, {
                    label: 'Handler2',
                    eventHandler: function () {
                        alert('Handler2');
                    }
                }]
            });

            infobox.setMap(map);

            Microsoft.Maps.Events.addHandler(pushpin, 'click', function (e) {
                infobox.setOptions({
                    visible: true,
                    showCloseButton: true,
                    offset: new Microsoft.Maps.Point(0, 25),
                    //showPointer: true,
                    //offset: new Microsoft.Maps.Point(-100, 0),
                    //typeName: Microsoft.Maps.InfoboxType.mini,
                    //zIndex: 1000,
                    //htmlContent: '<div style="width:300px; height:100px; background-color:blue">Your content here</div>'
                });
            });
        }

        //function getIntersectionPoint(line1, line2) {

        //    console.log(line1);
        //    console.log(line2);

        //    // Extract coordinates of the endpoints of the first line.
        //    const x1 = line1.geometry.x[0];
        //    const y1 = line1.geometry.y[0];
        //    const x2 = line1.geometry.x[1];
        //    const y2 = line1.geometry.y[1];

        //    // Extract coordinates of the endpoints of the second line.
        //    const x3 = line2.geometry.x[0];
        //    const y3 = line2.geometry.y[0];
        //    const x4 = line2.geometry.x[1];
        //    const y4 = line2.geometry.y[1];

        //    // Calculate the denominator for the equations.
        //    const den = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);

        //    // Check if the lines are parallel (denominator is zero).
        //    if (den === 0) {
        //        return null; // No intersection, or the lines are coincident.
        //    }

        //    // Calculate the intersection point.
        //    const t = ((x1 - x3) * (y3 - y4) - (y1 - y3) * (x3 - x4)) / den;
        //    const intersectionX = x1 + t * (x2 - x1);
        //    const intersectionY = y1 + t * (y2 - y1);

        //    console.log(intersectionX)
        //    console.log(intersectionY)

        //    var point = new Microsoft.Maps.Point(intersectionX, intersectionY);
        //    return point;
        //    //return new Microsoft.Maps.Location(intersectionX, intersectionY);
        //}

    </script>

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
